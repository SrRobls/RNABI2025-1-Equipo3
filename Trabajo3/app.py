import streamlit as st
import torch
import torch.nn as nn
from torchvision import transforms, models
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import pandas as pd
import os
import io
import base64
from notebooks.modulo2.classifiers import DriverClassifier
from notebooks.modulo3.recommendators import CollaborativeRecommendator

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Clasificaci√≥n de Conducci√≥n Distractiva",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuraci√≥n del sidebar
st.sidebar.title("Configuraci√≥n")
st.sidebar.markdown("### M√≥dulo 2: Clasificaci√≥n de Im√°genes")
st.sidebar.markdown("### M√≥dulo 3: Recomendaci√≥n de Destinos de Viaje")

# T√≠tulo principal
st.title("üöó Sistema Inteligente de Clasificaci√≥n de Conducci√≥n Distractiva")
st.markdown("---")

# Clases de comportamiento
CLASSES = [
    "other_actvities",
    "safe_driving", 
    "talking_phone",
    "texting_phone",
    "turning"
]

CLASSES_ES = [
    "Otras actividades",
    "Conducci√≥n segura",
    "Hablando por tel√©fono", 
    "Enviando mensajes",
    "Girando"
]

# Funci√≥n para cargar el modelo
@st.cache_resource
def load_model():
    return DriverClassifier()

# Funci√≥n para preprocesar imagen
def preprocess_image(image):
    """Preprocesa la imagen para el modelo"""
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    
    # Convertir a RGB si es necesario
    if image.mode != 'RGB':
        image = image.convert('RGB')
    
    # Aplicar transformaciones
    image_tensor = transform(image).unsqueeze(0)
    return image_tensor

# Funci√≥n para hacer predicci√≥n
def predict_image(model, image):
    # Guardar la imagen temporalmente para usar el m√©todo predict de la clase
    temp_path = "temp_image.png"
    image.save(temp_path)
    pred = model.predict(temp_path)
    os.remove(temp_path)
    # No tenemos probabilidades, solo la clase predicha
    return pred

# Funci√≥n para crear gr√°fico de barras
def plot_predictions(probabilities, classes_es):
    """Crea un gr√°fico de barras con las probabilidades"""
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.bar(classes_es, probabilities, color=['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57'])
    
    # Personalizar gr√°fico
    ax.set_title('Probabilidades de Clasificaci√≥n', fontsize=16, fontweight='bold')
    ax.set_xlabel('Comportamientos', fontsize=12)
    ax.set_ylabel('Probabilidad', fontsize=12)
    ax.set_ylim(0, 1)
    
    # Rotar etiquetas
    plt.xticks(rotation=45, ha='right')
    
    # Agregar valores en las barras
    for bar, prob in zip(bars, probabilities):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                f'{prob:.3f}', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    return fig

# Funci√≥n para guardar historial
def save_prediction_history(image, prediction, confidence, timestamp):
    if 'prediction_history' not in st.session_state:
        st.session_state.prediction_history = []
    img_buffer = io.BytesIO()
    image.save(img_buffer, format='PNG')
    img_str = base64.b64encode(img_buffer.getvalue()).decode()
    st.session_state.prediction_history.append({
        'timestamp': timestamp,
        'image': img_str,
        'prediction': prediction,
        'confidence': confidence
    })

# Cargar modelo
model = load_model()

if model is None:
    st.error("No se pudo cargar el modelo. Verifica que el archivo Resnet18.pth est√© disponible.")
    st.stop()

# Pesta√±as principales
tab1, tab2, tab3, tab4 = st.tabs(["üì∏ Clasificaci√≥n", "üìä Historial", "üìà Estad√≠sticas", "‚ÑπÔ∏è Informaci√≥n"])

with tab1:
    st.header("Clasificaci√≥n de Im√°genes de Conducci√≥n")
    
    # --- Estado para limpiar resultado al cambiar imagen ---
    if 'last_uploaded_file' not in st.session_state:
        st.session_state.last_uploaded_file = None
    if 'predicted_class' not in st.session_state:
        st.session_state.predicted_class = None

    uploaded_file = st.file_uploader(
        "Sube una imagen del conductor:",
        type=['png', 'jpg', 'jpeg'],
        help="Formatos soportados: PNG, JPG, JPEG"
    )

    # Limpiar resultado si cambia la imagen
    if uploaded_file is not None:
        if st.session_state.last_uploaded_file != uploaded_file.name:
            st.session_state.predicted_class = None
            st.session_state.last_uploaded_file = uploaded_file.name

        image = Image.open(uploaded_file)
        st.image(image, caption="Imagen subida", use_container_width=True)
        if st.button("üîç Clasificar Imagen", type="primary"):
            temp_path = "temp_image.png"
            image.save(temp_path)
            predicted_class = model.predict(temp_path)
            st.session_state.predicted_class = predicted_class
            if predicted_class in CLASSES:
                idx = CLASSES.index(predicted_class)
                clase_es = CLASSES_ES[idx]
            else:
                clase_es = predicted_class
            st.markdown(f"**Comportamiento detectado:** {clase_es}")
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            save_prediction_history(image, clase_es, 1.0, timestamp)
            st.success("‚úÖ Clasificaci√≥n completada y guardada en el historial")
        elif st.session_state.predicted_class is not None:
            # Mostrar el resultado de la √∫ltima predicci√≥n si existe
            predicted_class = st.session_state.predicted_class
            if predicted_class in CLASSES:
                idx = CLASSES.index(predicted_class)
                clase_es = CLASSES_ES[idx]
            else:
                clase_es = predicted_class
            st.markdown(f"**Comportamiento detectado:** {clase_es}")
    else:
        st.session_state.last_uploaded_file = None
        st.session_state.predicted_class = None

with tab2:
    st.header("üìä Historial de Predicciones")
    
    if 'prediction_history' in st.session_state and st.session_state.prediction_history:
        # Crear DataFrame del historial
        history_df = pd.DataFrame(st.session_state.prediction_history)
        
        # Mostrar estad√≠sticas r√°pidas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de predicciones", len(history_df))
        with col2:
            avg_confidence = history_df['confidence'].mean()
            st.metric("Confianza promedio", f"{avg_confidence:.2%}")
        with col3:
            safe_driving_count = len(history_df[history_df['prediction'] == 'Conducci√≥n segura'])
            st.metric("Conducci√≥n segura", safe_driving_count)
        
        # Mostrar historial en tabla
        st.subheader("Historial Detallado")
        
        # Crear tabla con im√°genes
        for i, row in history_df.iterrows():
            with st.expander(f"Predicci√≥n {i+1} - {row['timestamp']}"):
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    # Decodificar imagen
                    img_data = base64.b64decode(row['image'])
                    img = Image.open(io.BytesIO(img_data))
                    st.image(img, caption="Imagen analizada", width=200)
                
                with col2:
                    st.markdown(f"**Comportamiento:** {row['prediction']}")
                    st.markdown(f"**Confianza:** {row['confidence']:.2%}")
                    st.markdown(f"**Fecha:** {row['timestamp']}")
                    
                    # Indicador de confianza
                    st.progress(row['confidence'])
        
        # Bot√≥n para limpiar historial
        if st.button("üóëÔ∏è Limpiar Historial"):
            st.session_state.prediction_history = []
            st.rerun()
    
    else:
        st.info("No hay predicciones en el historial. ¬°Sube una imagen para comenzar!")

with tab3:
    st.header("üìà Estad√≠sticas y An√°lisis")
    
    if 'prediction_history' in st.session_state and st.session_state.prediction_history:
        history_df = pd.DataFrame(st.session_state.prediction_history)
        
        # An√°lisis de comportamientos
        st.subheader("Distribuci√≥n de Comportamientos")
        
        behavior_counts = history_df['prediction'].value_counts()
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig, ax = plt.subplots(figsize=(10, 6))
            behavior_counts.plot(kind='bar', ax=ax, color=['#4ecdc4', '#ff6b6b', '#45b7d1', '#96ceb4', '#feca57'])
            ax.set_title('Frecuencia de Comportamientos Detectados')
            ax.set_xlabel('Comportamiento')
            ax.set_ylabel('Frecuencia')
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            st.pyplot(fig)
        
        with col2:
            # Gr√°fico de confianza
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.hist(history_df['confidence'], bins=20, color='#4ecdc4', alpha=0.7)
            ax.set_title('Distribuci√≥n de Confianza')
            ax.set_xlabel('Confianza')
            ax.set_ylabel('Frecuencia')
            plt.tight_layout()
            st.pyplot(fig)
        
        # M√©tricas adicionales
        st.subheader("M√©tricas de Rendimiento")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de predicciones", len(history_df))
        
        with col2:
            avg_conf = history_df['confidence'].mean()
            st.metric("Confianza promedio", f"{avg_conf:.2%}")
        
        with col3:
            max_conf = history_df['confidence'].max()
            st.metric("Confianza m√°xima", f"{max_conf:.2%}")
        
        with col4:
            min_conf = history_df['confidence'].min()
            st.metric("Confianza m√≠nima", f"{min_conf:.2%}")
        
        # An√°lisis temporal
        st.subheader("An√°lisis Temporal")
        history_df['timestamp'] = pd.to_datetime(history_df['timestamp'])
        history_df['hour'] = history_df['timestamp'].dt.hour
        
        fig, ax = plt.subplots(figsize=(12, 6))
        hourly_counts = history_df['hour'].value_counts().sort_index()
        hourly_counts.plot(kind='line', marker='o', ax=ax, color='#45b7d1')
        ax.set_title('Predicciones por Hora del D√≠a')
        ax.set_xlabel('Hora')
        ax.set_ylabel('N√∫mero de Predicciones')
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        st.pyplot(fig)
    
    else:
        st.info("No hay datos suficientes para mostrar estad√≠sticas. ¬°Realiza algunas predicciones primero!")

with tab4:
    st.header("‚ÑπÔ∏è Informaci√≥n del Sistema")
    
    st.subheader("üéØ Objetivo del M√≥dulo 2")
    st.markdown("""
    Este m√≥dulo implementa un sistema de clasificaci√≥n de im√°genes para detectar comportamientos distractivos 
    en conductores, contribuyendo a mejorar la seguridad vial en la empresa de transporte.
    """)
    
    st.subheader("üîç Comportamientos Detectados")
    
    behaviors_info = {
        "Conducci√≥n segura": "El conductor mantiene una postura adecuada y atenci√≥n en la carretera",
        "Hablando por tel√©fono": "El conductor est√° usando el tel√©fono para hablar",
        "Enviando mensajes": "El conductor est√° escribiendo o enviando mensajes de texto",
        "Girando": "El conductor est√° realizando un giro o cambio de direcci√≥n",
        "Otras actividades": "Otras actividades distractivas no categorizadas"
    }
    
    for behavior, description in behaviors_info.items():
        with st.expander(f"üì± {behavior}"):
            st.write(description)
    
    st.subheader("ü§ñ Modelo Utilizado")
    st.markdown("""
    - **Arquitectura:** ResNet18
    - **Entrenamiento:** Transfer Learning con pesos pre-entrenados en ImageNet
    - **Clases:** 5 comportamientos diferentes
    - **Precisi√≥n:** Optimizada para detecci√≥n de distracciones
    """)
    
    st.subheader("üìä M√©tricas de Evaluaci√≥n")
    st.markdown("""
    El modelo eval√∫a cada predicci√≥n con:
    - **Confianza:** Probabilidad de que la clasificaci√≥n sea correcta
    - **Precisi√≥n:** Exactitud en la identificaci√≥n de comportamientos
    - **Recall:** Capacidad de detectar todos los casos de distracci√≥n
    """)
    
    st.subheader("üöÄ C√≥mo Usar")
    st.markdown("""
    1. **Subir imagen:** Selecciona una imagen del conductor desde tu dispositivo
    2. **Clasificar:** Haz clic en el bot√≥n de clasificaci√≥n
    3. **Revisar resultados:** Analiza la predicci√≥n y la confianza
    4. **Consultar historial:** Revisa todas las predicciones anteriores
    5. **Ver estad√≠sticas:** Analiza tendencias y patrones
    """)
    
    st.subheader("‚ö†Ô∏è Limitaciones")
    st.markdown("""
    - La calidad de la imagen afecta la precisi√≥n de la clasificaci√≥n
    - El modelo funciona mejor con im√°genes claras y bien iluminadas
    - Se recomienda usar im√°genes donde el conductor sea claramente visible
    """)


st.markdown("---")
st.markdown("---")
# T√≠tulo principal
st.title("üåÑ Sistema de Recomendaci√≥n de Destinos de Viaje")
st.markdown("---")

# Argumentos
ARGSS3 = [
    "DestinationID",
    "Name",
    "State",
    "Type",
    "Popularity",
    "BestTimeToVisit"
]


ARGS3_ES = [
    "ID del destino",
    "Nombre",
    "Estado/Provincia",
    "Tipo",
    "Popularidad",
    "Mejor √©poca para visitar"
]

# Funci√≥n para cargar el modelo
@st.cache_resource
def load_model3():
    return CollaborativeRecommendator()

# Cargar modelo
recommendator = load_model3()

if model is None:
    st.error("No se pudo cargar el modelo. Verifica que el archivo recommendators.py est√© disponible.")
    st.stop()

st.write("Introduce tu **User ID** para recibir recomendaciones personalizadas de destinos en India.")

# ---------------------------
# Inputs de usuario
# ---------------------------
user_id = st.number_input("User ID", min_value=1, step=1)

# ---------------------------
# Ejecutar recomendaci√≥n
# ---------------------------
if st.button("Obtener recomendaciones"):
    with st.spinner("Generando recomendaciones..."):
        recommendations = recommendator.recommend(user_id)

        if recommendations.empty:
            st.warning("No se encontraron recomendaciones para este usuario.")
        else:
            st.success("¬°Aqu√≠ est√°n tus recomendaciones!")
            st.dataframe(recommendations)
            # ---------------------------
            # Nota opcional
            # ---------------------------
            st.caption("Dataset: India Travel Recommender | Modelo colaborativo | Desarrollado para proyectos educativos.")

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        <p>Sistema Inteligente Integrado para Predicci√≥n, Clasificaci√≥n y Recomendaci√≥n en la Empresa de Transporte</p>
        <p>M√≥dulo 2: Clasificaci√≥n de Conducci√≥n Distractiva</p>
    </div>
    """,
    unsafe_allow_html=True
) 