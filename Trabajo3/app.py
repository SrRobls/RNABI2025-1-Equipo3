import streamlit as st
import torch
import torch.nn as nn
from torchvision import transforms, models
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import pandas as pd
import os
import io
import base64
from notebooks.modulo2.classifiers import DriverClassifier
from notebooks.modulo3.recommendators import CollaborativeRecommendator
from notebooks.modulo1.modulo1 import run_module1

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Clasificaci√≥n de Conducci√≥n Distractiva",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuraci√≥n del sidebar
st.sidebar.title("MODULOS")
st.sidebar.markdown("### M√≥dulo 1: Predicci√≥n de Demanda")
st.sidebar.markdown("### M√≥dulo 2: Clasificaci√≥n de Im√°genes de Conducci√≥n")
st.sidebar.markdown("### M√≥dulo 3: Sistema de Recomendaci√≥n de Destinos de Viaje")

# T√≠tulo principal
st.title("üõ†Ô∏è Herramienta Web para el An√°lisis Inteligente de Transporte")

st.header("4.1 Introducci√≥n")
st.markdown("""
La presente herramienta web ha sido desarrollada como una soluci√≥n integral para la gesti√≥n, an√°lisis y toma de decisiones en el sector transporte, combinando t√©cnicas avanzadas de inteligencia artificial y ciencia de datos. Su objetivo principal es facilitar a empresas, investigadores y tomadores de decisiones el acceso a modelos predictivos, clasificadores autom√°ticos y sistemas de recomendaci√≥n, todo desde una interfaz intuitiva y accesible desde cualquier navegador.

A trav√©s de esta plataforma, el usuario puede interactuar con distintos m√≥dulos inteligentes que permiten anticipar la demanda de rutas, analizar el comportamiento de conductores y recibir recomendaciones personalizadas de destinos, optimizando as√≠ la operaci√≥n y la experiencia de los usuarios finales.

Esta herramienta es el resultado de un trabajo colaborativo y multidisciplinario, integrando conocimientos de an√°lisis de datos, machine learning, desarrollo web y experiencia de usuario, con el fin de aportar valor real y tangible al sector transporte.
""")

st.header("4.2 Tecnolog√≠as utilizadas")
st.markdown("""
Esta herramienta se apoya en un stack tecnol√≥gico moderno y robusto, que garantiza tanto la eficiencia en el procesamiento como la facilidad de uso:

- **Python**: Lenguaje principal para el desarrollo de la l√≥gica y los modelos.
- **Streamlit**: Framework para la creaci√≥n de aplicaciones web interactivas de manera r√°pida y sencilla, ideal para prototipos y despliegue de soluciones de ciencia de datos.
- **PyTorch**: Biblioteca de deep learning utilizada para la construcci√≥n y entrenamiento de modelos de clasificaci√≥n de im√°genes.
- **scikit-learn**: Herramientas de machine learning para tareas de recomendaci√≥n y an√°lisis de datos.
- **Pandas y NumPy**: Manipulaci√≥n y an√°lisis eficiente de grandes vol√∫menes de datos.
- **Matplotlib y Seaborn**: Visualizaci√≥n avanzada de resultados, m√©tricas y tendencias.
- **Otras librer√≠as**: PIL para procesamiento de im√°genes, y utilidades est√°ndar de Python para manejo de archivos y fechas.

El uso de estas tecnolog√≠as permite integrar modelos complejos y visualizaciones ricas en una experiencia de usuario fluida y amigable. Adem√°s, la arquitectura modular facilita la escalabilidad y el mantenimiento del sistema, permitiendo la incorporaci√≥n de nuevos m√≥dulos o funcionalidades en el futuro.
""")

st.header("4.3 Descripci√≥n de la interfaz")
st.markdown("""
La interfaz de la herramienta est√° dise√±ada bajo principios de simplicidad y claridad, permitiendo que cualquier usuario, sin importar su nivel t√©cnico, pueda aprovechar al m√°ximo las funcionalidades ofrecidas.

- **Estructura en bloques**: Cada m√≥dulo se presenta como un bloque independiente, con su propio formulario de entrada y visualizaci√≥n de resultados.
- **Inputs intuitivos**: Los par√°metros requeridos por cada m√≥dulo (como n√∫mero de d√≠as a predecir, im√°genes a analizar o ID de usuario) se solicitan mediante controles sencillos como cajas num√©ricas, selectores y botones.
- **Visualizaci√≥n inmediata**: Los resultados, m√©tricas y gr√°ficas se muestran de forma clara y ordenada justo despu√©s de cada acci√≥n, permitiendo una interpretaci√≥n r√°pida y efectiva.
- **Navegaci√≥n vertical**: El usuario puede desplazarse f√°cilmente entre los diferentes m√≥dulos y secciones, accediendo a la informaci√≥n y funcionalidades de manera secuencial.
- **Mensajes y ayudas contextuales**: Se incluyen descripciones, recomendaciones y advertencias para guiar al usuario durante el uso de la herramienta.

**Ejemplo de uso:**
- Un planificador de rutas puede anticipar la demanda futura de los destinos tur√≠sticos m√°s populares y ajustar la oferta de transporte en consecuencia.
- Un supervisor de seguridad vial puede analizar im√°genes de conductores y detectar comportamientos distractivos de manera autom√°tica.
- Un turista o usuario final puede recibir recomendaciones personalizadas de destinos seg√∫n su historial y preferencias, mejorando su experiencia de viaje.

Esta organizaci√≥n facilita la experimentaci√≥n, el an√°lisis comparativo y la toma de decisiones informadas en tiempo real, tanto para usuarios t√©cnicos como no t√©cnicos.
""")

st.header("4.4 Funcionalidades")
st.markdown("""
La herramienta integra tres m√≥dulos principales, cada uno orientado a resolver un problema espec√≠fico dentro del √°mbito del transporte inteligente:

- **M√≥dulo 1: Predicci√≥n de demanda de rutas o destinos tur√≠sticos**
    - Permite anticipar la demanda futura en las rutas m√°s populares, ayudando a planificar recursos y optimizar la operaci√≥n.
    - El usuario selecciona el horizonte de predicci√≥n (n√∫mero de d√≠as) y obtiene gr√°ficas, m√©tricas y an√°lisis detallados para cada ruta.
    - Ideal para la gesti√≥n de flotas, planificaci√≥n de servicios y an√°lisis de tendencias tur√≠sticas.
    - **Beneficio:** Reduce la incertidumbre y mejora la asignaci√≥n de recursos.

- **M√≥dulo 2: Clasificaci√≥n autom√°tica de im√°genes de conducci√≥n**
    - Analiza im√°genes de conductores para detectar comportamientos distractivos o inseguros mediante modelos de deep learning.
    - El usuario sube una imagen y recibe una clasificaci√≥n autom√°tica, junto con m√©tricas de confianza y recomendaciones.
    - √ötil para empresas de transporte, aseguradoras y proyectos de seguridad vial.
    - **Beneficio:** Contribuye a la prevenci√≥n de accidentes y mejora la seguridad en carretera.

- **M√≥dulo 3: Recomendaci√≥n personalizada de destinos o rutas**
    - Ofrece sugerencias de destinos tur√≠sticos o rutas a partir de las preferencias y el historial de cada usuario.
    - El usuario puede ingresar su ID o seleccionar su nombre para recibir recomendaciones personalizadas, visualizando adem√°s la popularidad y el tipo de cada destino sugerido.
    - Facilita la personalizaci√≥n de la experiencia y la promoci√≥n de destinos menos conocidos.
    - **Beneficio:** Aumenta la satisfacci√≥n del usuario y fomenta el descubrimiento de nuevas opciones.

Cada m√≥dulo puede ser utilizado de manera independiente, permitiendo adaptar la herramienta a diferentes necesidades y escenarios de uso. Adem√°s, la integraci√≥n de los tres m√≥dulos en una sola plataforma potencia el an√°lisis cruzado y la toma de decisiones estrat√©gicas.
""")

st.markdown("---")

# ‚îÄ‚îÄ‚îÄ M√ìDULO 1: Predicci√≥n de Demanda ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.header("üìà M√≥dulo 1: Predicci√≥n de Demanda de Transporte")
st.markdown("Introduce s√≥lo el horizonte (d√≠as) y ejecuta.")

horizon = st.number_input(
    "Horizonte (d√≠as)", min_value=1, max_value=365, value=30
)

if st.button("‚ñ∂ Ejecutar M√≥dulo 1"):
    with st.spinner("Generando predicciones‚Ä¶"):
        resultados = run_module1(horizon)

    for ruta, info in resultados.items():
        st.subheader(f"Ruta: {ruta}")
        st.subheader("üìä M√©tricas de Backtest")
        st.table(info["metrics"])
        st.subheader("üìà Demanda Sint√©tica")
        st.pyplot(info["fig_demand"])
        st.subheader("üîç Descomposici√≥n de la Serie")
        st.pyplot(info["fig_decomp"])

st.markdown("---")

st.markdown("---")


# Clases de comportamiento
CLASSES = [
    "other_actvities",
    "safe_driving", 
    "talking_phone",
    "texting_phone",
    "turning"
]

CLASSES_ES = [
    "Otras actividades",
    "Conducci√≥n segura",
    "Hablando por tel√©fono", 
    "Enviando mensajes",
    "Girando"
]

# Funci√≥n para cargar el modelo
@st.cache_resource
def load_model():
    return DriverClassifier()

# Funci√≥n para preprocesar imagen
def preprocess_image(image):
    """Preprocesa la imagen para el modelo"""
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    
    # Convertir a RGB si es necesario
    if image.mode != 'RGB':
        image = image.convert('RGB')
    
    # Aplicar transformaciones
    image_tensor = transform(image).unsqueeze(0)
    return image_tensor

# Funci√≥n para hacer predicci√≥n
def predict_image(model, image):
    # Guardar la imagen temporalmente para usar el m√©todo predict de la clase
    temp_path = "temp_image.png"
    image.save(temp_path)
    pred = model.predict(temp_path)
    os.remove(temp_path)
    # No tenemos probabilidades, solo la clase predicha
    return pred

# Funci√≥n para crear gr√°fico de barras
def plot_predictions(probabilities, classes_es):
    """Crea un gr√°fico de barras con las probabilidades"""
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.bar(classes_es, probabilities, color=['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57'])
    
    # Personalizar gr√°fico
    ax.set_title('Probabilidades de Clasificaci√≥n', fontsize=16, fontweight='bold')
    ax.set_xlabel('Comportamientos', fontsize=12)
    ax.set_ylabel('Probabilidad', fontsize=12)
    ax.set_ylim(0, 1)
    
    # Rotar etiquetas
    plt.xticks(rotation=45, ha='right')
    
    # Agregar valores en las barras
    for bar, prob in zip(bars, probabilities):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                f'{prob:.3f}', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    return fig

# Funci√≥n para guardar historial
def save_prediction_history(image, prediction, confidence, timestamp):
    if 'prediction_history' not in st.session_state:
        st.session_state.prediction_history = []
    img_buffer = io.BytesIO()
    image.save(img_buffer, format='PNG')
    img_str = base64.b64encode(img_buffer.getvalue()).decode()
    st.session_state.prediction_history.append({
        'timestamp': timestamp,
        'image': img_str,
        'prediction': prediction,
        'confidence': confidence
    })

# Cargar modelo
model = load_model()

if model is None:
    st.error("No se pudo cargar el modelo. Verifica que el archivo Resnet18.pth est√© disponible.")
    st.stop()

# Pesta√±as principales
tab1, tab2, tab3, tab4 = st.tabs(["üì∏ Clasificaci√≥n", "üìä Historial", "üìà Estad√≠sticas", "‚ÑπÔ∏è Informaci√≥n"])

with tab1:
    st.header("Clasificaci√≥n de Im√°genes de Conducci√≥n")
    
    # --- Estado para limpiar resultado al cambiar imagen ---
    if 'last_uploaded_file' not in st.session_state:
        st.session_state.last_uploaded_file = None
    if 'predicted_class' not in st.session_state:
        st.session_state.predicted_class = None

    uploaded_file = st.file_uploader(
        "Sube una imagen del conductor:",
        type=['png', 'jpg', 'jpeg'],
        help="Formatos soportados: PNG, JPG, JPEG"
    )

    # Limpiar resultado si cambia la imagen
    if uploaded_file is not None:
        if st.session_state.last_uploaded_file != uploaded_file.name:
            st.session_state.predicted_class = None
            st.session_state.last_uploaded_file = uploaded_file.name

        image = Image.open(uploaded_file)
        st.image(image, caption="Imagen subida", use_container_width=True)
        if st.button("üîç Clasificar Imagen", type="primary"):
            temp_path = "temp_image.png"
            image.save(temp_path)
            predicted_class = model.predict(temp_path)
            st.session_state.predicted_class = predicted_class
            if predicted_class in CLASSES:
                idx = CLASSES.index(predicted_class)
                clase_es = CLASSES_ES[idx]
            else:
                clase_es = predicted_class
            st.markdown(f"**Comportamiento detectado:** {clase_es}")
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            save_prediction_history(image, clase_es, 1.0, timestamp)
            st.success("‚úÖ Clasificaci√≥n completada y guardada en el historial")
        elif st.session_state.predicted_class is not None:
            # Mostrar el resultado de la √∫ltima predicci√≥n si existe
            predicted_class = st.session_state.predicted_class
            if predicted_class in CLASSES:
                idx = CLASSES.index(predicted_class)
                clase_es = CLASSES_ES[idx]
            else:
                clase_es = predicted_class
            st.markdown(f"**Comportamiento detectado:** {clase_es}")
    else:
        st.session_state.last_uploaded_file = None
        st.session_state.predicted_class = None

with tab2:
    st.header("üìä Historial de Predicciones")
    
    if 'prediction_history' in st.session_state and st.session_state.prediction_history:
        # Crear DataFrame del historial
        history_df = pd.DataFrame(st.session_state.prediction_history)
        
        # Mostrar estad√≠sticas r√°pidas
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total de predicciones", len(history_df))
        with col2:
            safe_driving_count = len(history_df[history_df['prediction'] == 'Conducci√≥n segura'])
            st.metric("Conducci√≥n segura", safe_driving_count)
        
        # Mostrar historial en tabla
        st.subheader("Historial Detallado")
        # Crear tabla con im√°genes
        for i, row in history_df.iterrows():
            with st.expander(f"Predicci√≥n {i+1} - {row['timestamp']}"):
                col1, col2 = st.columns([1, 2])
                with col1:
                    # Decodificar imagen
                    img_data = base64.b64decode(row['image'])
                    img = Image.open(io.BytesIO(img_data))
                    st.image(img, caption="Imagen analizada", width=200)
                with col2:
                    st.markdown(f"**Comportamiento:** {row['prediction']}")
                    st.markdown(f"**Fecha:** {row['timestamp']}")
        # Bot√≥n para limpiar historial
        if st.button("üóëÔ∏è Limpiar Historial"):
            st.session_state.prediction_history = []
            st.rerun()
    else:
        st.info("No hay predicciones en el historial. ¬°Sube una imagen para comenzar!")

with tab3:
    st.header("üìà Estad√≠sticas y An√°lisis")
    
    if 'prediction_history' in st.session_state and st.session_state.prediction_history:
        history_df = pd.DataFrame(st.session_state.prediction_history)
        
        # An√°lisis de comportamientos
        st.subheader("Distribuci√≥n de Comportamientos")
        behavior_counts = history_df['prediction'].value_counts()
        fig, ax = plt.subplots(figsize=(10, 6))
        behavior_counts.plot(kind='bar', ax=ax, color=['#4ecdc4', '#ff6b6b', '#45b7d1', '#96ceb4', '#feca57'])
        ax.set_title('Frecuencia de Comportamientos Detectados')
        ax.set_xlabel('Comportamiento')
        ax.set_ylabel('Frecuencia')
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        st.pyplot(fig)
    else:
        st.info("No hay datos suficientes para mostrar estad√≠sticas. ¬°Realiza algunas predicciones primero!")

with tab4:
    st.header("‚ÑπÔ∏è Informaci√≥n del Sistema")
    
    st.subheader("üéØ Objetivo del M√≥dulo 2")
    st.markdown("""
    Este m√≥dulo implementa un sistema de clasificaci√≥n de im√°genes para detectar comportamientos distractivos 
    en conductores, contribuyendo a mejorar la seguridad vial en la empresa de transporte.
    """)
    
    st.subheader("üîç Comportamientos Detectados")
    
    behaviors_info = {
        "Conducci√≥n segura": "El conductor mantiene una postura adecuada y atenci√≥n en la carretera",
        "Hablando por tel√©fono": "El conductor est√° usando el tel√©fono para hablar",
        "Enviando mensajes": "El conductor est√° escribiendo o enviando mensajes de texto",
        "Girando": "El conductor est√° realizando un giro o cambio de direcci√≥n",
        "Otras actividades": "Otras actividades distractivas no categorizadas"
    }
    
    for behavior, description in behaviors_info.items():
        with st.expander(f"üì± {behavior}"):
            st.write(description)
    
    st.subheader("ü§ñ Modelo Utilizado")
    st.markdown("""
    - **Arquitectura:** ResNet18
    - **Entrenamiento:** Transfer Learning con pesos pre-entrenados en ImageNet
    - **Clases:** 5 comportamientos diferentes
    - **Precisi√≥n:** Optimizada para detecci√≥n de distracciones
    """)
    
    st.subheader("üìä M√©tricas de Evaluaci√≥n")
    st.markdown("""
    El modelo eval√∫a cada predicci√≥n con:
    - **Confianza:** Probabilidad de que la clasificaci√≥n sea correcta
    - **Precisi√≥n:** Exactitud en la identificaci√≥n de comportamientos
    - **Recall:** Capacidad de detectar todos los casos de distracci√≥n
    """)
    
    st.subheader("üöÄ C√≥mo Usar")
    st.markdown("""
    1. **Subir imagen:** Selecciona una imagen del conductor desde tu dispositivo
    2. **Clasificar:** Haz clic en el bot√≥n de clasificaci√≥n
    3. **Revisar resultados:** Analiza la predicci√≥n y la confianza
    4. **Consultar historial:** Revisa todas las predicciones anteriores
    5. **Ver estad√≠sticas:** Analiza tendencias y patrones
    """)
    
    st.subheader("‚ö†Ô∏è Limitaciones")
    st.markdown("""
    - La calidad de la imagen afecta la precisi√≥n de la clasificaci√≥n
    - El modelo funciona mejor con im√°genes claras y bien iluminadas
    - Se recomienda usar im√°genes donde el conductor sea claramente visible
    """)


st.markdown("---")
st.markdown("---")
# T√≠tulo principal
st.title("üåÑ Sistema de Recomendaci√≥n de Destinos de Viaje")
st.markdown("---")

def update_destination_rep(recommendations_df):
    """
    Actualiza un archivo CSV que almacena el n√∫mero de veces que cada destino
    ha sido recomendado.

    Args:
        recommendations_df (pd.DataFrame): DataFrame con al menos la columna 'DestinationID'.
        reporte_path (str): Ruta del archivo CSV donde se guardar√° el reporte acumulado.
    """
    reporte_path="./notebooks/modulo3/destinationRep.csv"

    # Verificar que exista la columna esperada
    if 'DestinationID' not in recommendations_df.columns:
        raise ValueError("El DataFrame de recomendaciones debe contener la columna 'DestinationID'.")

    # Leer el archivo existente o crear uno vac√≠o si no existe
    if os.path.exists(reporte_path):
        reporte_df = pd.read_csv(reporte_path)
    else:
        # Crear DataFrame vac√≠o con las columnas necesarias
        reporte_df = pd.DataFrame(columns=['DestinationID', 'Recomendaciones'])
    
    # Contar cu√°ntas veces aparece cada DestinationID en este nuevo lote
    nuevas_recomendaciones = recommendations_df['DestinationID'].value_counts().reset_index()
    nuevas_recomendaciones.columns = ['DestinationID', 'Nuevas']

    # Combinar con el historial
    reporte_df = pd.merge(
        reporte_df,
        nuevas_recomendaciones,
        on='DestinationID',
        how='outer'
    )

    # Rellenar NaN con 0 y sumar
    reporte_df['Recomendaciones'] = reporte_df['Recomendaciones'].fillna(0) + reporte_df['Nuevas'].fillna(0)

    # Eliminar columna auxiliar
    reporte_df.drop(columns=['Nuevas'], inplace=True)

    # Guardar actualizado
    reporte_df.to_csv(reporte_path, index=False)

# Funci√≥n para cargar el modelo
@st.cache_resource
def load_model3():
    return CollaborativeRecommendator()

# Cargar modelo
recommendator = load_model3()

# Carga la base de datos
m3_df = pd.read_csv(recommendator.MERGED_DF_PATH)

# Pesta√±as principales
tab_3_1, tab_3_2 = st.tabs(["üë• Recomendaci√≥n por Nombre", "üìñ Recomendaci√≥n por ID"])

with tab_3_1:
    st.header("Recomendaci√≥n por Nombre")

    if model is None:
        st.error("No se pudo cargar el modelo. Verifica que el archivo recommendators.py est√© disponible.")
        st.stop()

    st.write("Eligue entre algunos usuarios para ver sus recomendaciones personalizadas")

    # Tomar primeros 10 usuarios: UserID + Name_y
    primeros_usuarios = m3_df[['UserID', 'Name_y']].drop_duplicates().head(10)
    primeros_usuarios = primeros_usuarios[primeros_usuarios['UserID'] < 642]

    # Crear un diccionario: nombre => UserID
    usuarios_dict = dict(zip(primeros_usuarios['Name_y'], primeros_usuarios['UserID']))

    # ---------------------------
    # Selectbox con nombres
    # ---------------------------
    selected_name = st.selectbox(
        "Selecciona un usuario por nombre:",
        options=list(usuarios_dict.keys())
    )

    # ---------------------------
    # Bot√≥n para generar recomendaci√≥n
    # ---------------------------
    if st.button("Generar recomendaciones"):
        # Mapear nombre a ID
        selected_user_id = usuarios_dict[selected_name]

        with st.spinner(f"Generando recomendaciones para **{selected_name}** (User ID: {selected_user_id})..."):
            recommendations = recommendator.recommend(int(selected_user_id))

            if recommendations.empty:
                st.warning("¬°No se encontraron recomendaciones para este usuario!")
            else:
                st.success(f"¬°Recomendaciones para **{selected_name}**!")
                st.dataframe(recommendations)
                update_destination_rep(recommendations)
                # ---------------------------
                # Nota opcional
                # ---------------------------
                st.caption("Dataset: India Travel Recommender | Modelo colaborativo | Desarrollado para proyectos educativos.")

with tab_3_2:
    st.header("Recomendaci√≥n por ID")

    if model is None:
        st.error("No se pudo cargar el modelo. Verifica que el archivo recommendators.py est√© disponible.")
        st.stop()

    st.write("Introduce tu **User ID** para recibir recomendaciones personalizadas de destinos en India.")

    # ---------------------------
    # Inputs de usuario
    # ---------------------------
    user_id = st.number_input("User ID", min_value=1, step=1)

    # ---------------------------
    # Ejecutar recomendaci√≥n
    # ---------------------------
    if st.button("Obtener recomendaciones"):
        with st.spinner("Generando recomendaciones..."):
            recommendations = recommendator.recommend(user_id)

            if recommendations.empty:
                st.warning("No se encontraron recomendaciones para este usuario.")
            else:
                st.success("¬°Aqu√≠ est√°n tus recomendaciones!")
                st.dataframe(recommendations)
                update_destination_rep(recommendations)
                # ---------------------------
                # Nota opcional
                # ---------------------------
                st.caption("Dataset: India Travel Recommender | Modelo colaborativo | Desarrollado para proyectos educativos.")

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        <p>Sistema Inteligente Integrado para Predicci√≥n, Clasificaci√≥n y Recomendaci√≥n en la Empresa de Transporte</p>
        <p>M√≥dulo 2: Clasificaci√≥n de Conducci√≥n Distractiva</p>
    </div>
    """,
    unsafe_allow_html=True
) 